
#include <msp430g2553.h>
volatile long tempRaw, light, temp;
char result[100];
volatile long sample[100];
void ConfigureAdc_temp();
void ConfigureAdc_Photo();
void Configure_Buzz1();
void Configure_Buzz2();
void uart_init(void);
void ConfigClocks(void);
void strreverse(char* begin, char* end);
void itoa(int value, char* str, int base);
void port_init();
void main(void)

{
    WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
    port_init();
    ConfigClocks();
    uart_init();
    _delay_cycles(5);                // Wait for ADC Ref to settle
    int i=0;
    while(1){
                if (i==0)
                        {
                    ConfigureAdc_temp();
                                   ADC10CTL0 |= ENC + ADC10SC +MSC;       // Converter Enable, Sampling/conversion start
                                   while((ADC10CTL0 & ADC10IFG) == 0);    // check the Flag, while its low just wait
                                   P1OUT |= BIT6;                         // green LED on
                                   //_delay_cycles(20000000);               // delay for about 1 second so LED doesn't flash too fast
                                   //_delay_cycles(20000000);               // delay for about 1 second so LED doesn't flash too fast
                                   tempRaw = ADC10MEM;                    // read the converted data into a variable
                                   temp = (((tempRaw-673)*423)/1024); //converts to degree celsius                       // green LED off
                                   ADC10CTL0 &= ~ADC10IFG;                // clear the flag
                                   itoa(temp,result,10); // convert temperature reading to Fahrenheit
                                   int acount =0;


                                                       while(result[acount]!='\0')
                                                     {
                                                         while((IFG2 & UCA0TXIFG)==0);                  //Wait Unitl the UART transmitter is ready
                                                         UCA0TXBUF = result[acount++] ;                   //Transmit the received data.
                                                     }
                                                       i++;
                        }
                if (i==1)
                {
                    ConfigureAdc_Photo();
                                   ADC10CTL0 |= ENC + ADC10SC +MSC;       // Converter Enable, Sampling/conversion start
                                   while((ADC10CTL0 & ADC10IFG) == 0);    // check the Flag, while its low just wait
                                   P1OUT |= BIT6;                         // green LED on
                                   //_delay_cycles(20000000);               // delay for about 1 second so LED doesn't flash too fast
                                   //_delay_cycles(20000000);               // delay for about 1 second so LED doesn't flash too fast
                                   light = ADC10MEM;                        // green LED off
                                   ADC10CTL0 &= ~ADC10IFG;                // clear the flag
                                   itoa(light,result,10); // convert temperature reading to Fahrenheit
                                   int acount =0;

                                                       while(result[acount]!='\0')
                                                     {
                                                         while((IFG2 & UCA0TXIFG)==0);                  //Wait Unitl the UART transmitter is ready
                                                         UCA0TXBUF = result[acount++] ;                   //Transmit the received data.
                                                     }
                                                       i--;
                }
                if((light <300))
                {
                    void Configure_Buzz2();
                }
                if ((temp <70)||(temp>80))
                                                   {
                                                       void Configure_Buzz1();

                                                   }


    }
}
void Configure_Buzz1()
{
    P1DIR |= BIT6;             // P1.6 to output
     TA0CTL = TASSEL_2 + MC_2+ID_0+TACLR;//+TACLR;
     //TA0CCR0 = 32768; // Set maximum count value (PWM Period
     TA0CCR1 = 32768; // initialise counter compare value
     TA0CCTL0 |= CCIE;
     TA0CCTL1 |= CCIE;
     TA0CCTL0 &=~CCIFG;
     TA0CCTL1 &=~CCIFG;
     _enable_interrupts(); // Enter LPM0
}
void Configure_Buzz2()
{
    P1DIR |= BIT6;             // P1.6 to output
     TA0CTL = TASSEL_2 + MC_2+ID_0+TACLR;//+TACLR;
     //TA0CCR0 = 32768; // Set maximum count value (PWM Period
     TA0CCR1 = 32768; // initialise counter compare value
     TA0CCTL0 |= CCIE;
     TA0CCTL1 |= CCIE;
     TA0CCTL0 &=~CCIFG;
     TA0CCTL1 &=~CCIFG;
     _enable_interrupts(); // Enter LPM0
}
// Configure ADC Temperature
void ConfigureAdc_temp(){
     ADC10CTL0 &= ~ENC;
     ADC10CTL1 = INCH_0 + ADC10DIV_0 + CONSEQ_2;
     ADC10CTL0 = SREF_1 | ADC10SHT_3 | REFON | ADC10ON ;//Vref+, Vss, 64 ATD clocks per sample, internal references, turn ADCON
     ADC10CTL0 |= ENC + ADC10SC +MSC;

}
 void ConfigureAdc_Photo(){
     ADC10CTL0 &= ~ENC;
     ADC10CTL1 = INCH_4 + ADC10DIV_0 + CONSEQ_2;
     ADC10CTL0 = SREF_1 | ADC10SHT_3  | ADC10ON ;//Vref+, Vss, 64 ATD clocks per sample, internal references, turn ADCON
     ADC10CTL0 |= ENC + ADC10SC +MSC;
     //light = ADC10MEM;
 }
void uart_init(void){
    UCA0CTL1 |= UCSWRST;                     //Disable the UART state machine
    UCA0CTL1 |= UCSSEL_3;                    //Select SMCLK as the baud rate generator source
    UCA0BR1 =0;
    UCA0BR0 = 104;                           //Produce a 9,600 Baud UART rate
    UCA0MCTL = 0x02;                         //Chooa propriately from Table 15-4 in User Guide
    UCA0CTL1 &= ~UCSWRST;                    //Enable the UART state naching
    IE2 |= UCA0RXIE;                         //Enable the UART receiver Interrupt
}
//void ConfigureAdc_Buzz(){
//    ADC10CTL1 = INCH_13 + ADC10DIV_0 + CONSEQ_3;
//    ADC10CTL0 = SREF_1 | ADC10SHT_3 | REFON | ADC10ON ;
//    ADC10CTL0 |= ENC + ADC10SC +MSC;
//    //sound = ADC10MEM;

//}

void ConfigClocks(void)
 {
  BCSCTL1 = CALBC1_1MHZ;                     // Set range
  DCOCTL = CALDCO_1MHZ;                      // Set DCO step + modulation
  BCSCTL3 |= LFXT1S_2;                       // LFXT1 = VLO
  IFG1 &= ~OFIFG;                            // Clear OSCFault flag
  BCSCTL2 = 0;                               // MCLK = DCO = SMCLK
 }
#pragma vector = TIMER0_A0_VECTOR       //define the interrupt service vector
__interrupt void TA0_ISR (void)    // interrupt service routine
{
P1OUT |=BIT6;
TA0CCTL0 &=~CCIFG;
}
#pragma vector = TIMER0_A1_VECTOR       //define the interrupt service vector
__interrupt void TA1_ISR (void)    // interrupt service routine
{
P1OUT &=~BIT6;
TA0CCTL1 &=~CCIFG;
}
void strreverse(char* begin, char* end)      // Function to reverse the order of the ASCII char array elements
{
    char aux;
    while(end>begin)
        aux=*end, *end--=*begin, *begin++=aux;
}
void itoa(int value, char* str, int base) {  //Function to convert the signed int to an ASCII char array
    static char num[] = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* wstr=str;
    int sign;
    // Validate that base is between 2 and 35 (inlcusive)
    if (base<2 || base>35){
        *wstr='\0';
        return;
    }
    // Get magnitude and th value
    sign=value;
    if (sign < 0)
        value = -value;
    do // Perform interger-to-string conversion.
        *wstr++ = num[value%base]; //create the next number in converse by taking the modolus
    while(value/=base);  // stop when you get  a 0 for the quotient
    if(sign<0) //attch sign character, if needed
        *wstr++='-';
    *wstr='\0'; //Attach a null character at end of char array. The string is in revers order at this point
    strreverse(str,wstr-1); // Reverse string
}
void port_init(){
    P1SEL |= BIT1 + BIT2;            // select non-GPIO  usage for Pins 1 and 2
    P1SEL2 |= BIT1 + BIT2;           // Select UART usage of Pins 1 and 2
}
